#!/usr/bin/env perl

use strict;
use warnings;

use Cwd;
use File::Spec qw(rel2abs);
use Getopt::Long;
use Git;

#---------------------------------------------------------------------------
#  Vars
#---------------------------------------------------------------------------
my @commit_lines      = get_commit_text();
my $commit_lines_size = scalar @commit_lines;
my @file_names        = qw(first second third forth fifth);

my $repo;                 # the current git repo
my %repos;                # hash of all git repos
my $current_directory;    # current directory

my $basic;                # create basic clone repo
my $num_commits;          # number of extra commits to generate

my $directory;            # directory to use
my $quiet;                # suppress some of the output

#---------------------------------------------------------------------------
#  Usage Sub
#---------------------------------------------------------------------------
sub usage
{
    use Pod::Usage;
    my $msg     = shift;
    my $verbose = shift;
    return pod2usage({-message => $msg, -verbose => $verbose});
}

#---------------------------------------------------------------------------
#  GetOpts
#---------------------------------------------------------------------------
my $valid = GetOptions(
                       'help'           => sub { usage('', 2) },
                       'basic'          => \$basic,
                       'quiet'          => \$quiet,
                       'directory=s'    => \$directory,
                       'moar-commits=i' => \$num_commits,
                      );
exit unless $valid;

#---------------------------------------------------------------------------
#  ...and go!
#---------------------------------------------------------------------------
$current_directory = getcwd();

$quiet = '--quiet' if $quiet;

if (defined $num_commits && $num_commits < 1) {
    usage('Invalid number of commits');
}

if ($basic || (!$num_commits)) {
    $directory = 'demo' unless $directory;
    generate_basic_clone_tree();
} elsif ($num_commits) {
    usage(File::Spec->rel2abs($directory) . ' does not exist') if ($directory && !-e $directory);
    $directory = '.' unless $directory;
    moar_commits();
}

#***************************************************************************
#  Supporting Subs
#***************************************************************************
# Generates a basic tree situation. Creates 3 commits on master.
# Then 3 commits on a new branch. Then another 2 commits on master.
sub generate_basic_tree
{
    print 'Generating Basic Tree in ' . File::Spec->rel2abs($directory) . "\n";

    set_up_repo($directory);
    chdir($directory);

    print "Generating 3 commits on master\n" unless $quiet;
    generate_commits(3);

    print "Generating 3 commits on dev\n" unless $quiet;
    checkout_create('dev');
    generate_commits(3);

    print "Generating 2 commits on master\n" unless $quiet;
    checkout('master');
    generate_commits(2);

    print "Merging dev into master using ours\n";
    $repo->command('merge', 'dev', '-s', 'ours');

    print "Generating 1 commit on master\n" unless $quiet;
    generate_commits(1);

    chdir($current_directory);
    return 1;
}

# Generates a basic clone tree situation. Creates a basic tree
# then clones it and adds a few more commits to each branch
sub generate_basic_clone_tree
{
    print "Generating Basic Clone Tree\n";
    generate_basic_tree();

    my $clone_dir = "$directory-clone";

    print 'Generating Clone in ' . File::Spec->rel2abs($clone_dir) . "\n";
    Git::command_noisy('clone', $directory, $clone_dir, '--quiet');

    chdir($clone_dir);
    set_repo($clone_dir);

    print "Generating 1 commit on testing\n" unless $quiet;
    checkout_create('testing');
    generate_commits(1);

    print "Generating 2 commits on master\n" unless $quiet;
    checkout('master');
    generate_commits(2);

    chdir($current_directory);
    return 1;
}

# Creates random commits in a given directory or the current directory
sub moar_commits
{
    print "Generating $num_commits commits in " . File::Spec->rel2abs($directory) . "\n";

    chdir($directory);
    set_repo($directory);
    generate_commits($num_commits);
    chdir($current_directory);
    return 1;
}

# Creates a repo in $directory
sub set_up_repo
{
    my ($directory) = @_;

    die File::Spec->rel2abs($directory) . " already exists\n" if (-e $directory);

    mkdir($directory) or die $!;
    chdir($directory) or die $!;

    Git::command('init');
    set_repo($directory);

    chdir($current_directory);
    return 1;
}

# Switches to a different repository
sub set_repo
{
    my ($new_repo) = @_;

    eval { $repos{$new_repo} = Git->repository() unless ($repos{$new_repo}); };
    die File::Spec->rel2abs($new_repo) . " is not a git repository\n" if $@;

    $repo = $repos{$new_repo};
    return 1;
}

# Checks out a branch
sub checkout
{
    my @options = @_;
    push(@options, $quiet) if $quiet;
    $repo->command('checkout', @options);
    return 1;
}

# Creates and checks out a branch
sub checkout_create
{
    my @options = @_;
    checkout('-b', @options);
    return 1;
}

# Generates $num commits
sub generate_commits
{
    my ($num) = @_;

    for (1 .. $num) {
        my @message;
        my @files = map { $file_names[$_] } generate_unique_integers(3, scalar @file_names);

        local $" = ', ';

        for (@files) {
            push(@message, prepare_file($_));
        }

        $repo->command('commit', '-m', "@message");
    }
    return 1;
}

# Edits and stages a file in the repo
# Returns a basic message about what the edit was
sub prepare_file
{
    my ($filename) = @_;
    my $msg = (-e $filename) ? 'Updated' : 'Added';
    my @lines = (grab_lines($filename), grab_new_lines(5));

    local $" = "\n";

    open(my $FILE, '>', $filename);
    print $FILE "@lines\n";
    close($FILE);

    $repo->command('add', $filename);
    return "$msg $filename";
}

# Grabs the lines from the file which have not been deleted
sub grab_lines
{
    my ($filename) = @_;
    my @lines;
    my @file_lines;

    return @lines unless (-e $filename);

    open(my $FILE, '<', $filename) or die $!;
    chomp(@file_lines = <$FILE>);
    close($FILE);

    my @lines_to_remove = sort { $a <=> $b } generate_unique_integers(2, scalar @file_lines);
    my $cur_delete_line = shift @lines_to_remove;
    my $size            = scalar @file_lines - 1;

    for (0 .. $size) {
        if (defined $cur_delete_line && $_ == $cur_delete_line) {
            $cur_delete_line = shift @lines_to_remove;
            next;
        }
        push(@lines, $file_lines[$_]);
    }

    return @lines;
}

# Returns $num_lines lines from the commit file
sub grab_new_lines
{
    my ($num_lines) = @_;
    my @line_numbers = generate_unique_integers($num_lines, $commit_lines_size);
    my @lines;

    for (@line_numbers) {
        push(@lines, $commit_lines[$_]);
    }

    return @lines;
}

# Generates $num unique random integers from 0 to $max - 1 inclusive
sub generate_unique_integers
{
    my ($num, $max) = @_;
    my %numbers;

    while (scalar keys(%numbers) < $num) {
        my $num = int(rand($max));
        $numbers{$num} = 1 unless $numbers{$num};
    }

    return keys(%numbers);
}

# Returns a bunch of text
sub get_commit_text
{
    return split /\n/, <<'END';
CHAPTER I. Down the Rabbit-Hole

Alice was beginning to get very tired of sitting by her sister on the
bank, and of having nothing to do: once or twice she had peeped into the
book her sister was reading, but it had no pictures or conversations in
it, 'and what is the use of a book,' thought Alice 'without pictures or
conversations?'

So she was considering in her own mind (as well as she could, for the
hot day made her feel very sleepy and stupid), whether the pleasure
of making a daisy-chain would be worth the trouble of getting up and
picking the daisies, when suddenly a White Rabbit with pink eyes ran
close by her.

There was nothing so VERY remarkable in that; nor did Alice think it so
VERY much out of the way to hear the Rabbit say to itself, 'Oh dear!
Oh dear! I shall be late!' (when she thought it over afterwards, it
occurred to her that she ought to have wondered at this, but at the time
it all seemed quite natural); but when the Rabbit actually TOOK A WATCH
OUT OF ITS WAISTCOAT-POCKET, and looked at it, and then hurried on,
Alice started to her feet, for it flashed across her mind that she had
never before seen a rabbit with either a waistcoat-pocket, or a watch
to take out of it, and burning with curiosity, she ran across the field
after it, and fortunately was just in time to see it pop down a large
rabbit-hole under the hedge.

In another moment down went Alice after it, never once considering how
in the world she was to get out again.

The rabbit-hole went straight on like a tunnel for some way, and then
dipped suddenly down, so suddenly that Alice had not a moment to think
about stopping herself before she found herself falling down a very deep
well.

Either the well was very deep, or she fell very slowly, for she had
plenty of time as she went down to look about her and to wonder what was
going to happen next. First, she tried to look down and make out what
she was coming to, but it was too dark to see anything; then she
looked at the sides of the well, and noticed that they were filled with
cupboards and book-shelves; here and there she saw maps and pictures
hung upon pegs. She took down a jar from one of the shelves as
she passed; it was labelled 'ORANGE MARMALADE', but to her great
disappointment it was empty: she did not like to drop the jar for fear
of killing somebody, so managed to put it into one of the cupboards as
she fell past it.

'Well!' thought Alice to herself, 'after such a fall as this, I shall
think nothing of tumbling down stairs! How brave they'll all think me at
home! Why, I wouldn't say anything about it, even if I fell off the top
of the house!' (Which was very likely true.)

Down, down, down. Would the fall NEVER come to an end! 'I wonder how
many miles I've fallen by this time?' she said aloud. 'I must be getting
somewhere near the centre of the earth. Let me see: that would be four
thousand miles down, I think--' (for, you see, Alice had learnt several
things of this sort in her lessons in the schoolroom, and though this
was not a VERY good opportunity for showing off her knowledge, as there
was no one to listen to her, still it was good practice to say it over)
'--yes, that's about the right distance--but then I wonder what Latitude
or Longitude I've got to?' (Alice had no idea what Latitude was, or
Longitude either, but thought they were nice grand words to say.)

Presently she began again. 'I wonder if I shall fall right THROUGH the
earth! How funny it'll seem to come out among the people that walk with
their heads downward! The Antipathies, I think--' (she was rather glad
there WAS no one listening, this time, as it didn't sound at all the
right word) '--but I shall have to ask them what the name of the country
is, you know. Please, Ma'am, is this New Zealand or Australia?' (and
she tried to curtsey as she spoke--fancy CURTSEYING as you're falling
through the air! Do you think you could manage it?) 'And what an
ignorant little girl she'll think me for asking! No, it'll never do to
ask: perhaps I shall see it written up somewhere.'

Down, down, down. There was nothing else to do, so Alice soon began
talking again. 'Dinah'll miss me very much to-night, I should think!'
(Dinah was the cat.) 'I hope they'll remember her saucer of milk at
tea-time. Dinah my dear! I wish you were down here with me! There are no
mice in the air, I'm afraid, but you might catch a bat, and that's very
like a mouse, you know. But do cats eat bats, I wonder?' And here Alice
began to get rather sleepy, and went on saying to herself, in a dreamy
sort of way, 'Do cats eat bats? Do cats eat bats?' and sometimes, 'Do
bats eat cats?' for, you see, as she couldn't answer either question,
it didn't much matter which way she put it. She felt that she was dozing
off, and had just begun to dream that she was walking hand in hand with
Dinah, and saying to her very earnestly, 'Now, Dinah, tell me the truth:
did you ever eat a bat?' when suddenly, thump! thump! down she came upon
a heap of sticks and dry leaves, and the fall was over.
END
}

__END__

=head1 NAME

B<git-demo> - This script will help you set up an example git repository in
a specific situation.

=head1 SYNOPSIS

 git-demo [--directory <path/to/git/repo>] [--basic] [--moar-commits <#>] [--quiet] [--help]

=head1 DESCRIPTION

This script will help you set up an example git repo in a specific situation.

=head1 OPTIONS

=over 8

=item --help

Display usage info.

=item --directory <path/to/git/repo>

Path to create the git repo in. The default when in basic mode is a directory called demo in the current directory.
The default when in moar-commits mode is the current directory.

=item --basic

Sets up a basic tree situaiton. Then clones it and creates a few more commits. This is the default option.

=item --moar-commits <#>

Generates # commits on the git repository specified by the --directory switch, or the current directory.

=item --quiet

Suppresses some output.

=back

=head1 AUTHOR

Written by Corey Maher

=cut
